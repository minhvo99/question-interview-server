import fs from 'fs';
import path from 'path';
import mongoose from 'mongoose';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Import data t·ª´ c√°c file JSON trong th∆∞ m·ª•c public
 */
export const importData = async () => {
  try {
    const publicDir = path.join(__dirname, '../../public');
    
    // Ki·ªÉm tra th∆∞ m·ª•c public c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(publicDir)) {
      throw new Error('Th∆∞ m·ª•c public kh√¥ng t·ªìn t·∫°i');
    }

    // L·∫•y danh s√°ch c√°c file JSON
    const files = fs.readdirSync(publicDir).filter(file => file.endsWith('.json'));
    
    if (files.length === 0) {
      console.log('Kh√¥ng t√¨m th·∫•y file JSON n√†o trong th∆∞ m·ª•c public');
      return;
    }

    console.log(`T√¨m th·∫•y ${files.length} file JSON:`, files);

    // Import t·ª´ng file
    for (const file of files) {
      const filePath = path.join(publicDir, file);
      const collectionName = path.basename(file, '.json'); // T√™n collection = t√™n file (kh√¥ng c√≥ .json)
      
      console.log(`ƒêang import ${file} v√†o collection ${collectionName}...`);
      
      // ƒê·ªçc file JSON
      const fileContent = fs.readFileSync(filePath, 'utf8');
      let data = JSON.parse(fileContent);
      
      // ƒê·∫£m b·∫£o data l√† array
      if (!Array.isArray(data)) {
        data = [data];
      }
      
      // Th√™m timestamps v√†o m·ªói document
      const now = new Date();
      const documentsWithTimestamps = data.map(doc => ({
        ...doc,
        createdAt: now,
        updatedAt: now
      }));
      
      // L·∫•y collection v√† insert data
      const collection = mongoose.connection.collection(collectionName);
      
      // X√≥a d·ªØ li·ªáu c≈© (n·∫øu mu·ªën)
      await collection.deleteMany({});
      
      // Insert d·ªØ li·ªáu m·ªõi
      const result = await collection.insertMany(documentsWithTimestamps);
      
      console.log(`‚úÖ ƒê√£ import ${result.insertedCount} documents v√†o collection ${collectionName}`);
    }
    
    console.log('üéâ Import data th√†nh c√¥ng!');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi import data:', error.message);
    throw error;
  }
};

/**
 * Import data t·ª´ m·ªôt file c·ª• th·ªÉ
 */
export const importSingleFile = async (filename) => {
  try {
    const publicDir = path.join(__dirname, '../../public');
    const filePath = path.join(publicDir, filename);
    
    if (!fs.existsSync(filePath)) {
      throw new Error(`File ${filename} kh√¥ng t·ªìn t·∫°i`);
    }
    
    const collectionName = path.basename(filename, '.json');
    console.log(`ƒêang import ${filename} v√†o collection ${collectionName}...`);
    
    const fileContent = fs.readFileSync(filePath, 'utf8');
    let data = JSON.parse(fileContent);
    
    if (!Array.isArray(data)) {
      data = [data];
    }
    
    const now = new Date();
    const documentsWithTimestamps = data.map(doc => ({
      ...doc,
      createdAt: now,
      updatedAt: now
    }));
    
    const collection = mongoose.connection.collection(collectionName);
    await collection.deleteMany({});
    const result = await collection.insertMany(documentsWithTimestamps);
    
    console.log(`‚úÖ ƒê√£ import ${result.insertedCount} documents v√†o collection ${collectionName}`);
    
  } catch (error) {
    console.error('‚ùå L·ªói khi import file:', error.message);
    throw error;
  }
};